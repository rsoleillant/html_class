<?php/*******************************************************************************Create Date : 22/05/2006 ---------------------------------------------------------------------- Class name : font Version : 1.1 Author : Rémy Soleillant Description : élément html <font>********************************************************************************/class font {    //**** attribute ************************************************************    //ATTENTION il faut enlever l'appartenance à la classe CSS mis par defaut avant de changer l'aspect du libellé  protected $int_size="" ;// ancienne valeur 2                //=>la taille du libellé   protected $stri_color="";             //=>la couleur du libellé  protected $stri_face="";              //=>la police du libellé  protected $stri_class;                //=>le nom de la classe CSS qui modifiera l'aspect du libellé // ancienne valeur par défaut="pn-normal"  protected $stri_id="";                //=>l'identificateur CSS  protected $bool_gras=false;           //=>permet de savoir si le libellé est en gras -true- ou pas -false-  protected $bool_italique=false;       //=>permet de savoir si le libellé est en italique -true- ou pas -false-  protected $bool_souligne=false;       //=>savoir si le libellé est souligné -true- ou pas -false-//---Y.M  protected $mixed_value;                //=>le libellé  protected $stri_style;                //=>le style CSS   protected $stri_onclick="";           //=>les actions js sur le clic du font  protected $stri_onmouseover="";       //=>les actions js sur le passage de la souris  protected $stri_onmouseout="";        //=>les actions js sur lorsque la souris quite l'élément  protected $stri_title="";             //=>affiche un title sur le font (On mouse over)----Y.M  public    $arra_sauv=array();         //=>tableau pour la sérialisation  protected $arra_data;                 //attribut data      //**** constructor ***********************************************************  function __construct($value,$gras=false,$italique=false,$souligne=false)   {    //construit l'objet font    //@param : $value => le libellé du font    //@param : $gras => true : libellé en caractère gras    //                  false : libellé en caractère normal    //$param : $italique => true : libellé en caractère italique    //                      false : libellé en caractère normal     $this->mixed_value = $value;   // $this->stri_value=htmlentities($value,ENT_COMPAT, 'ISO-8859-1');    if(is_bool($gras)){$this->bool_gras=$gras;}    if(is_bool($italique)){$this->bool_italique=$italique;}    if(is_bool($souligne)){$this->bool_souligne = $souligne;}//------Y.M  }      //**** setter ****************************************************************  public function setValue($value){$this->mixed_value=$value;}  public function setOnmouseover($value){$this->stri_onmouseover=$value;}  public function setOnclick($value){$this->stri_onclick=$value;}  public function setOnmouseout($value){$this->stri_onmouseout=$value;}  public function setGras($bool)  {    if(is_bool($bool))      {$this->bool_gras=$bool;}    else      {echo("<script>alert('bool_gras doit etre de type boolean');</script>");}  }    public function setItalique($bool)  {    if(is_bool($bool))      {$this->bool_italique=$bool;}    else      {echo("<script>alert('bool_italique doit etre de type boolean');</script>");}  }  public function setUnderline($bool)//-----Y.M  {    if(is_bool($bool))      {$this->bool_souligne=$bool;}    else      {echo("<script>alert('bool_souligne doit etre de type boolean');</script>");}  }    public function setClass($value){$this->stri_class=$value;}  public function setId($value){$this->stri_id=$value;}  public function setColor($color){$this->stri_color=$color;}  public function setFace($value){$this->stri_face=$value;}  public function setSize($int)  {    //met la taille du libellé     //-attention il faut enlever l'appartenance à la classe css mis par defaut-    //@param : $int => un entier    //@return : void        if(is_numeric ($int))      {$this->int_size=$int;}    else      {echo("<script>alert('int_size doit etre de type entier');</script>");}  }  public function setStyle($value){$this->stri_style=$value;}    public function setTitle($value){$this->stri_title=$value;}//----------Y.M      //**** getter ****************************************************************  public function getSize(){return $this->int_size;}  public function getOnmouseover(){return $this->stri_onmouseover;}  public function getOnclick(){return $this->stri_onclick;}  public function getStyle(){return $this->stri_style;}  public function getColor(){return $this->stri_color;}  public function getFace(){return $this->stri_face;}  public function getValue(){return $this->mixed_value;}  public function getClass(){return $this->stri_class;}  public function getId(){return $this->stri_id;}  public function getGras(){return $this->bool_gras;}  public function getItalique(){return $this->bool_italique;}  public function getUnderline(){return $this->bool_souligne;}//-----Y.M  public function getOnmouseout(){return $this->stri_onmouseout;}  public function getTitle(){return $this->stri_title;}//----------Y.M    public function addData($stri_name,$value){$this->arra_data[$stri_name]=$value;}  /*************************************************************  Permet de construire la valeur qui sera entre <td> et </td>  Paramètres :aucun Retour :string : la valeur  du td    **************************************************************/     public function constructValue()  {      if(is_string($this->mixed_value)) //cas standard, l'attribut de valeur est une chaine     {         return $this->mixed_value;}          if(is_object($this->mixed_value)&& method_exists($this->mixed_value,"htmlValue"))//cas de passage d'un seul objet avec méthode htmlValue      {return $this->mixed_value->htmlValue();}          if(is_array($this->mixed_value))//cas d'un tableau d'objet et/ou de string     {      $stri_res="";      foreach($this->mixed_value as $mixed_param)      {        if(is_string($mixed_param))         {$stri_res.= $mixed_param;}                if(is_object($mixed_param)&& method_exists($mixed_param,"htmlValue"))         {$stri_res.= $mixed_param->htmlValue();}      }            return $stri_res;     }     //autre cas normalement non traité   return $this->mixed_value;  }        //**** public method *********************************************************  public function htmlValue()  {    //affichage de l'interface    //@return : $stri_res => code HTML du font        //- construction de l'attribut data    $arra_data=array();    foreach($this->arra_data as $stri_name=>$stri_value)    {      $arra_data[]='data-'.$stri_name.'="'.$stri_value.'"';    }    $stri_data=implode(' ', $arra_data) ;        $stri_res="<font ";    $stri_res.=($this->int_size!="")?" size=\"".$this->int_size."\"" : "";    $stri_res.=($this->stri_color!="")?" color=\"".$this->stri_color."\"" : "";    $stri_res.=($this->stri_face!="")?" face=\"".$this->stri_face."\"" : "";    $stri_res.=($this->stri_class!="")?" class=\"".$this->stri_class."\" ":"";    $stri_res.=($this->stri_id!="")?" id=\"".$this->stri_id."\" ":"";    $stri_res.=($this->stri_style!="")?" style=\"".$this->stri_style."\" ":"";    $stri_res.=($this->stri_onclick!="")? " onclick=\"".$this->stri_onclick."\" " : "";    $stri_res.=($this->stri_onmouseover!="")? " onmouseover=\"".$this->stri_onmouseover."\" " : "";    $stri_res.=($this->stri_onmouseout!="")? " onmouseout=\"".$this->stri_onmouseout."\" " : "";    $stri_res.=((string)$this->stri_title!="")? " title=\"".$this->stri_title."\" " : "";//---Y.M    $stri_res.=$stri_data;        $stri_res.=">";    $stri_res.=($this->bool_gras)?"<b>":"";    $stri_res.=($this->bool_italique)?"<i>":"";    $stri_res.=($this->bool_souligne)?"<u>":"";//------Y.M    //$stri_res.=$this->mixed_value;	$stri_res.=$this->constructValue();//construction de la valeur en string    $stri_res.=($this->bool_souligne)?"</u>":"";//-----Y.M    $stri_res.=($this->bool_gras)?"</b>":"";    $stri_res.=($this->bool_italique)?"</i>":"";    $stri_res.="</font>";     return $stri_res;  }      //**** method for serialization **********************************************  public function __sleep()   {    //sérialisation de la classe font        $this->arra_sauv['size']= $this->int_size;    $this->arra_sauv['color']= $this->stri_color;    $this->arra_sauv['face']= $this->stri_face;    $this->arra_sauv['class']= $this->stri_class;    $this->arra_sauv['id']= $this->stri_id;    $this->arra_sauv['gras']= $this->bool_gras;    $this->arra_sauv['italique']= $this->bool_italique;    $this->arra_sauv['souligne']= $this->bool_souligne;//---------Y.M    $this->arra_sauv['value']= $this->mixed_value;    $this->arra_sauv['style']= $this->stri_style;    $this->arra_sauv['onclick']= $this->stri_onclick;    $this->arra_sauv['onmouseover']= $this->stri_onmouseover;    $this->arra_sauv['style']= $this->stri_style;//--------Y.M    return array('arra_sauv');  }    public function __wakeup()   {    //désérialisation de la classe font    $this->int_size= $this->arra_sauv['size'];    $this->stri_color= $this->arra_sauv['color'];    $this->stri_face= $this->arra_sauv['face'];    $this->stri_class= $this->arra_sauv['class'];    $this->stri_id= $this->arra_sauv['id'];    $this->bool_gras= $this->arra_sauv['gras'];    $this->bool_italique= $this->arra_sauv['italique'];    $this->bool_souligne= $this->arra_sauv['souligne'];//-------Y.M    $this->mixed_value= $this->arra_sauv['value'];    $this->stri_style= $this->arra_sauv['style'];    $this->stri_onclick= $this->arra_sauv['onclick'];    $this->stri_onmouseover= $this->arra_sauv['onmouseover'];    $this->stri_title= $this->arra_sauv['title'];//------Y.M    $this->arra_sauv = array();    } }?>